//detirminant hisoblash formulasi b[0][0]*(b[1][1]*b[2][2]-b[1][2]*b[2][1])+b[0][1]*(b[1][2]*b[2][0]-b[1][0]*b[2][2])+b[0][2]*(b[1][0]*b[2][1]-b[1][1]*b[2][0])
#include <iostream>
#include <math.h>
using namespace std;
int main()
{
	float a[5],b[3][3],c[3][3],d[3][3],e[3][3],f[3][3],det,det1,det2,det3;
	cout<<"R1=";cin>>a[0];
	cout<<"R2=";cin>>a[1];
	cout<<"R3=";cin>>a[2];
	cout<<"E1=";cin>>a[3];
	cout<<"E2=";cin>>a[4];
	
	b[0][0]=1;
	b[0][1]=-1;
	b[0][2]=1;
	b[1][0]=a[0];
	b[1][1]=0;
	b[1][2]=-a[2];
	b[2][0]=0;
	b[2][1]=a[1];
	b[2][2]=a[2];
	det=0;
	det=det+b[0][0]*(b[1][1]*b[2][2]-b[1][2]*b[2][1]);
	det=det+b[0][1]*(b[1][2]*b[2][0]-b[1][0]*b[2][2]);
	det=det+b[0][2]*(b[1][0]*b[2][1]-b[1][1]*b[2][0]);


	
	c[0][0]=0;
	c[0][1]=-1;
	c[0][2]=1;
	c[1][0]=a[3];
	c[1][1]=0;
	c[1][2]=-a[2];
	c[2][0]=-a[4];
	c[2][1]=a[1];
	c[2][2]=a[2];
	det1=0;
	det1=det1+c[0][0]*(c[1][1]*c[2][2]-c[1][2]*c[2][1]);
	det1=det1+c[0][1]*(c[1][2]*c[2][0]-c[1][0]*c[2][2]);
	det1=det1+c[0][2]*(c[1][0]*c[2][1]-c[1][1]*c[2][0]);
	
	
	d[0][0]=1;
	d[0][1]=0;
	d[0][2]=1;
	d[1][0]=a[0];
	d[1][1]=a[3];
	d[1][2]=-a[2];
	d[2][0]=0;
	d[2][1]=-a[4];
	d[2][2]=a[2];
	det2=0;
	det2=det2+d[0][0]*(d[1][1]*d[2][2]-d[1][2]*d[2][1]);
	det2=det2+d[0][1]*(d[1][2]*d[2][0]-d[1][0]*d[2][2]);
	det2=det2+d[0][2]*(d[1][0]*d[2][1]-d[1][1]*d[2][0]);
	
	
	f[0][0]=1;
	f[0][1]=-1;
	f[0][2]=0;
	f[1][0]=a[0];
	f[1][1]=0;
	f[1][2]=a[3];
	f[2][0]=0;
	f[2][1]=a[1];
	f[2][2]=-a[4];
	det3=0;
	det3=det3+f[0][0]*(f[1][1]*f[2][2]-f[1][2]*f[2][1]);
	det3=det3+f[0][1]*(f[1][2]*f[2][0]-f[1][0]*f[2][2]);
	det3=det3+f[0][2]*(f[1][0]*f[2][1]-f[1][1]*f[2][0]);
 
float I1,I2,I3;
int I;
I1=fabs(det1/det);
I2=fabs(det2/det);
I3=fabs(det3/det);
cout<<"I1="<<I1<<endl;
cout<<"I2="<<I2<<endl;
cout<<"I3="<<I3<<endl;
I=(I1)-(I2)+(I3);
cout<<"Isbot uchun I1-I2+I3="<<I<<endl;	
	return 0;
}
